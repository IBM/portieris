// Copyright 2020 Portieris Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vulnerability

import (
	"github.com/IBM/portieris/helpers/credential"
	"github.com/IBM/portieris/helpers/image"
	"github.com/IBM/portieris/pkg/apis/securityenforcement/v1beta1"
	"github.com/golang/glog"
)

// Scanner is an interface for vulnerability scanner implementations
type Scanner interface {
	CanImageDeployBasedOnVulnerabilities(image.Reference) (ScanResponse, error)
}

// ScanResponse is a struct for vulnerability scanners to return
type ScanResponse struct {
	CanDeploy  bool
	DenyReason string
}

// ScannerFactory is the interface for a ScannerFactory, supports testing
type ScannerFactory interface {
	GetScanners(image.Reference, credential.Credentials, v1beta1.Policy) []Scanner
}

// DefaultScannerFactory is the defaul implementation of ScannerFactory
type DefaultScannerFactory struct{}

// NewScannerFactory returns a new DefaultScannerFactory
func NewScannerFactory() DefaultScannerFactory {
	return DefaultScannerFactory{}
}

// GetScanners returns a slice of suitable Scanners based on the provided policy
func (f *DefaultScannerFactory) GetScanners(img image.Reference, credentials credential.Credentials, policy v1beta1.Policy) (scanners []Scanner) {
	if policy.Vulnerability.ICCRVA.Enabled != nil && *policy.Vulnerability.ICCRVA.Enabled {
		glog.Infof("vulnerability: Using Vulnerability Advisor for IBM Cloud Container Registry for image %q.", img.String())
		scanners = append(scanners, NewIBMVulnerabilityAdvisorScanner(credentials, policy.Vulnerability.ICCRVA.Account))
	}

	return
}
