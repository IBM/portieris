// Copyright 2020 Portieris Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vulnerability

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/IBM/portieris/helpers/credential"
	"github.com/IBM/portieris/helpers/image"
	"github.com/golang/glog"
)

const maxRetries = 3

var sleepTime = time.Second

// ICCRVAScanner is a client wrapper for interacting with Vulnerability Advisor for IBM Cloud Container Registry API
type ICCRVAScanner struct {
	credentials          credential.Credentials
	client               HTTPClient
	Timeout              int64
	AccountHeader        string
	authenticatorFactory authenticatorFactoryInterface
}

// HTTPClient makes testing ICCRVAScanner simpler
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

var (
	// ErrorUnauthorised is a typed error for unauthorised requests
	ErrorUnauthorised = errors.New("unauthorised")
)

// NewIBMVulnerabilityAdvisorScanner returns a new client for IBM's Vulnerability Advisor
func NewIBMVulnerabilityAdvisorScanner(credentials credential.Credentials, account string) *ICCRVAScanner {
	return &ICCRVAScanner{
		credentials:   credentials,
		AccountHeader: account,
		client: &http.Client{
			Timeout: time.Second * time.Duration(10),
		},
		authenticatorFactory: authenticatorFactory{},
	}
}

// ICCRVASummary represents the summary datatype returned by the VA API
type ICCRVASummary struct {
	Status                        string `json:"status" description:"Overall vulnerability assessment status from: OK, WARN, BLOCK, UNSUPPORTED, INCOMPLETE, UNSCANNED"`
	ScanTime                      int64  `json:"scan_time" description:"The scan time of the report as a UNIX timestamp"`
	IssueCount                    int    `json:"issue_count" description:"The number of issues found"`
	ExemptIssueCount              int    `json:"exempt_issue_count" description:"The number of exempt issues found"`
	VulnerabilityCount            int    `json:"vulnerability_count" description:"The number of vulnerability issues found"`
	ExemptVulnerabilityCount      int    `json:"exempt_vulnerability_count" description:"The number of exempt vulnerability issues found"`
	ConfigurationIssueCount       int    `json:"configuration_issue_count" description:"The number of configuration issues found"`
	ExemptConfigurationIssueCount int    `json:"exempt_configuration_issue_count" description:"The number of exempt configuration issues found"`
}

// CanImageDeployBasedOnVulnerabilities is an implementation of the Scanner interface for Vulnerability Advisor for IBM Cloud Container Registry
func (s *ICCRVAScanner) CanImageDeployBasedOnVulnerabilities(image image.Reference) (scan ScanResponse, err error) {
	if !image.HasIBMRepo() {
		return scan, fmt.Errorf("Cannot use Vulnerability Advisor for IBM Cloud Container Registry with image %q", image.String())
	}
	var summary ICCRVASummary
	summary, err = s.getImageStatus(image)
	if err == nil {
		switch summary.Status {
		// WARN is returned when exemptions cover all of the vulnerabilities in the image
		case "OK", "WARN", "UNSUPPORTED":
			glog.Infof("ICCRVA: Image %s CAN DEPLOY with Vulnerability Advisor for IBM Cloud Container Registry status %q", image.String(), summary.Status)
			scan.CanDeploy = true
		default:
			reason := fmt.Sprintf("Image %s CANNOT DEPLOY with Vulnerability Advisor for IBM Cloud Container Registry status %q", image.String(), summary.Status)
			glog.Infof("ICCRVA: %s", reason)
			scan.DenyReason = reason
		}
	} else {
		reason := fmt.Sprintf("Image %s CANNOT DEPLOY due to Vulnerability Advisor for IBM Cloud Container Registry error: %q", image.String(), err)
		glog.Infof("ICCRVA: %s", reason)
		scan.DenyReason = reason
	}
	return
}

// internal call to VA - API docs: https://cloud.ibm.com/apidocs/container-registry/va#imagestatusquerypath
// GET /va/api/v3/report/image/status/{name}
func (s *ICCRVAScanner) getImageStatus(image image.Reference) (ICCRVASummary, error) {
	if len(s.credentials) == 0 {
		return ICCRVASummary{}, fmt.Errorf("No credentials on client to call Vulnerability Advisor for IBM Cloud Container Registry with")
	}

	uri := fmt.Sprintf("https://%s/va/api/v3/report/image/status/%s", image.GetHostname(), image.String())

	var summary *ICCRVASummary
	for _, cred := range s.credentials {
		sum, err := s.callVA(cred, uri)
		switch {
		case err == nil:
			break
		case errors.Is(err, ErrorUnauthorised):
			continue
		default:
			return ICCRVASummary{}, fmt.Errorf("Failed to get Vulnerability Advisor for IBM Cloud Container Registry scan result for %q: %v", image.String(), err)
		}

		if sum != nil {
			summary = sum
			break
		}
	}

	if summary == nil {
		return ICCRVASummary{}, fmt.Errorf("Not authorised to get Vulnerability Advisor for IBM Cloud Container Registry scan result for %q: %w", image.String(), ErrorUnauthorised)
	}

	return *summary, nil
}

func (s *ICCRVAScanner) callVA(cred credential.Credential, uri string) (*ICCRVASummary, error) {
	req, err := s.createRequest(cred, uri)
	if err != nil {
		return nil, err
	}

	for try := 0; try < maxRetries; try++ {
		// Exponential backoff
		time.Sleep(sleepTime * time.Duration(try))

		var resp *http.Response
		resp, err = s.client.Do(req)
		if err != nil {
			continue
		}

		defer resp.Body.Close()

		switch resp.StatusCode {
		case http.StatusOK:
			break
		case http.StatusUnauthorized, http.StatusForbidden:
			return nil, ErrorUnauthorised
		case http.StatusNotFound:
			return nil, errors.New("Not found")
		case http.StatusBadRequest:
			return nil, errors.New("Bad request")
		case http.StatusBadGateway, http.StatusInternalServerError, http.StatusServiceUnavailable:
			err = errors.New("Internal server error")
			continue
		default:
			err = fmt.Errorf("Unhandled response from Vulnerability Advisor for IBM Cloud Container Registry: %d", resp.StatusCode)
			continue
		}

		decoder := json.NewDecoder(resp.Body)
		summary := &ICCRVASummary{}
		err = decoder.Decode(summary)
		if err != nil {
			return summary, err
		}

		return summary, nil
	}

	return &ICCRVASummary{}, err
}

func (s *ICCRVAScanner) createRequest(cred credential.Credential, uri string) (*http.Request, error) {
	req, _ := http.NewRequest(http.MethodGet, uri, nil)

	if s.AccountHeader != "" {
		req.Header.Add("Account", s.AccountHeader)
	}

	if cred.Username == "iamapikey" {
		glog.Info("ICCRVA: Exchanging IAM API key for bearer token")
		authenticator, err := s.getAuthenticator(cred)
		if err == nil {
			authErr := authenticator.Authenticate(req)
			if authErr == nil {
				return req, authErr
			}

			glog.Infof("ICCRVA: IAM Authenticate returned error: %q, falling back to username/password", authErr)
		} else {
			glog.Infof("ICCRVA: Error getting IAM authenticator: %q, falling back to username/password", err)
		}
	}

	req.SetBasicAuth(cred.Username, cred.Password)

	return req, nil
}

func (s *ICCRVAScanner) getAuthenticator(cred credential.Credential) (requestAuthenticator, error) {
	var authenticator requestAuthenticator
	cache := getAuthenticatorCache()
	cacheEntry, ok := cache.Map.Load(cred.Password)
	if !ok {
		var err error
		authenticator, err = s.authenticatorFactory.NewAuthenticator(cred.Password)
		if err != nil {
			return nil, err
		}
		cache.Map.Store(cred.Password, authenticator)
	} else {
		authenticator, ok = cacheEntry.(requestAuthenticator)
		if !ok {
			glog.Infof("ICCRVA: Authenticator in cache not of type RequestAuthenticator. Deleting from cache and getting new one.")
			cache.Map.Delete(cred.Password)
			return s.getAuthenticator(cred)
		}
	}
	return authenticator, nil
}
