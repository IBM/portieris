// Copyright 2020 Portieris Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vulnerability

import (
	"testing"

	"github.com/IBM/portieris/helpers/credential"
	"github.com/IBM/portieris/helpers/image"
	"github.com/IBM/portieris/pkg/apis/securityenforcement/v1beta1"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_NewScannerFactory(t *testing.T) {
	f := NewScannerFactory()
	assert.Equal(t, DefaultScannerFactory{}, f)
}

func boolToPointer(in bool) *bool {
	return &in
}

func Test_GetScanners(t *testing.T) {
	f := NewScannerFactory()

	tests := []struct {
		name         string
		policy       v1beta1.Policy
		credentials  credential.Credentials
		wantScanners []Scanner
	}{
		{
			name:   "Returns no scanners when none in policy",
			policy: v1beta1.Policy{},
		},
		{
			name: "Returns Vulnerability Advisor for IBM Cloud Container Registry scanner if enabled",
			policy: v1beta1.Policy{
				Vulnerability: v1beta1.Vulnerability{
					ICCRVA: v1beta1.ICCRVA{
						Enabled: boolToPointer(true),
					},
				},
			},
			wantScanners: []Scanner{
				&ICCRVAScanner{},
			},
		},
		{
			name: "Account in ICCRVA policy is correctly set on scanner",
			policy: v1beta1.Policy{
				Vulnerability: v1beta1.Vulnerability{
					ICCRVA: v1beta1.ICCRVA{
						Enabled: boolToPointer(true),
						Account: "123"},
				},
			},
			wantScanners: []Scanner{
				&ICCRVAScanner{AccountHeader: "123"},
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			img, err := image.NewReference("icr.io/sam/ida")
			require.NoError(t, err)

			gotScanners := f.GetScanners(*img, test.credentials, test.policy)

			assert.Equal(t, len(test.wantScanners), len(gotScanners))
			for idx, wantScanner := range test.wantScanners {
				gotScanner := gotScanners[idx]
				assert.IsType(t, wantScanner, gotScanner)

				switch s := gotScanner.(type) {
				case *ICCRVAScanner:
					// ICCRVA scanner specific checks
					wantAccount := test.policy.Vulnerability.ICCRVA.Account
					gotAccount := s.AccountHeader
					assert.Equal(t, wantAccount, gotAccount)
				}
			}
		})
	}
}
