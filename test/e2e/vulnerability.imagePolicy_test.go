// Copyright 2020  Portieris Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package e2e

import (
	"testing"

	"github.com/IBM/portieris/test/e2e/utils"
)

func Test_ICCRVA_ImagePolicy(t *testing.T) {
	utils.CheckIfTesting(t, testVulnerability)
	if defaultClusterPolicy := utils.DeleteThenReturnClusterImagePolicy(t, framework, "default"); defaultClusterPolicy != nil {
		defer framework.CreateClusterImagePolicy(defaultClusterPolicy)
	}

	t.Run("Pods are admitted when ICCRVA is enabled when VA results are OK", func(t *testing.T) {
		t.Parallel()
		// this pod spec references an image with UNSUPPORTED status.
		namespace := utils.CreateImagePolicyInstalledNamespace(t, framework, "./testdata/imagepolicy/vulnerability-enabled.yaml")
		utils.TestDeploymentRunnable(t, framework, "./testdata/deployment/vulnerability-allow.yaml", namespace.Name)
	})
	t.Run("Pods are denied when ICCRVA is enabled when VA results are not OK", func(t *testing.T) {
		t.Parallel()
		namespace := utils.CreateImagePolicyInstalledNamespace(t, framework, "./testdata/imagepolicy/vulnerability-enabled.yaml")
		utils.TestDeploymentNotRunnable(t, framework, "./testdata/deployment/vulnerability-deny.yaml", namespace.Name)
	})
	t.Run("Pods that are admissable by simple signing, are denied when VA status is not OK", func(t *testing.T) {
		t.Parallel()
		namespace := utils.CreateImagePolicyInstalledNamespace(t, framework, "./testdata/imagepolicy/vulnerability-enabled-with-simple.yaml")
		utils.CreateSecret(t, framework, "./testdata/secret/simple1pubkey.yaml", namespace.Name)
		utils.TestDeploymentNotRunnable(t, framework, "./testdata/deployment/vulnerability-deny-vulnerable-signed.yaml", namespace.Name)
	})
	t.Run("Pods are not admitted when they have non-exempted config issues", func(t *testing.T) {
		t.Parallel()
		// this pod spec references an image with configuration issues.
		namespace := utils.CreateImagePolicyInstalledNamespace(t, framework, "./testdata/imagepolicy/vulnerability-enabled.yaml")
		utils.TestDeploymentNotRunnable(t, framework, "./testdata/deployment/vulnerability-account-exemption.yaml", namespace.Name)
	})
	t.Run("Pods are admitted when exemptions from a specified account make the image safe to deploy", func(t *testing.T) {
		t.Parallel()
		// this test requires you to export E2E_ACCOUNT_HEADER to an account which has exempted the configuration issue:
		namespace := utils.CreateImagePolicyInstalledNamespace(t, framework, "./testdata/imagepolicy/vulnerability-with-account.yaml")
		utils.TestDeploymentRunnable(t, framework, "./testdata/deployment/vulnerability-account-exemption.yaml", namespace.Name)
	})

}
